/////////////** FRONTEND CODE **///////////////////////

import React, { useEffect, useState } from "react";
import supabase from "../supabaseClient";
import "../components/Table.css";

function Table() {
  const [allTasks, setAllTasks] = useState([]);

  async function getAllTasks() {
    const { data, error } = await supabase.from("tasks").select("*");

    if (error) {
      throw error;
    }

    setAllTasks(data);
  }

  useEffect(() => {
    getAllTasks();
  }, []);

  console.log(allTasks);
  

  async function handleReminderToggle(id, newStatus) {
    console.log('id & status', id, newStatus);
    
    await fetch("https://whatsappbot-task-management-be-production.up.railway.app/update-reminder", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ id, reminder: newStatus }),
    });

    // Refresh data after update
    getAllTasks();
  }

  return (
    <div>
      <table style={tableStyle}>
        <thead>
          <tr>
            <th style={tableHeaderStyle}>ID</th>
            <th style={tableHeaderStyle}>Created At</th>
            <th style={tableHeaderStyle}>Name</th>
            <th style={tableHeaderStyle}>Phone</th>
            <th style={tableHeaderStyle}>Task</th>
            <th style={tableHeaderStyle}>Task Done</th>
            <th style={tableHeaderStyle}>Due Date</th>
            <th style={tableHeaderStyle}>Reminder</th>
            <th style={tableHeaderStyle}>WhatsApp</th>
          </tr>
        </thead>
        <tbody>
          {allTasks.map((row) => (
            <tr key={row.id}>
              <td style={tableCellStyle}>{row.id}</td>
              <td style={tableCellStyle}>{new Date(row.created_at).toLocaleDateString("en-GB")}</td>
              <td style={tableCellStyle}>{row.name}</td>
              <td style={tableCellStyle}>{row.phone}</td>
              <td style={tableCellStyle}>{row.tasks}</td>
              <td style={tableCellStyle}>{row.task_done}</td>
              <td style={tableCellStyle}>
                {new Date(row.due_date).toLocaleString("en-GB", {
                  day: "2-digit",
                  month: "2-digit",
                  year: "numeric",
                  hour: "2-digit",
                  minute: "2-digit",
                  hour12: false,
                })}
              </td>
              <td style={tableCellStyle}>
                <label className="toggle-switch">
                  <input
                    type="checkbox"
                    checked={row.reminder}
                    className="toggle-input"
                    onChange={(e) => handleReminderToggle(row.id, e.target.checked)}
                  />
                  <span className="slider"></span>
                </label>
              </td>
              <td style={tableCellStyle} onClick={() => window.open(`https://wa.me/${row.phone}`)}>ðŸ“ž</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

const tableStyle = { width: "90%", margin: "auto", marginTop: "50px", borderCollapse: "collapse", boxShadow: "0px 0px 15px rgba(0, 0, 0, 0.1)" };
const tableHeaderStyle = { backgroundColor: "#4CAF50", color: "white", padding: "12px 15px", textAlign: "center", fontWeight: "bold" };
const tableCellStyle = { border: "1px solid #ddd", padding: "8px", textAlign: "center" };

export default Table;


// BACKEND //

require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const twilio = require("twilio");
const supabase = require("./supabaseClient");
const cron = require("node-cron");
const cors = require("cors");

const app = express();
const port = process.env.PORT || 8000;

app.use(cors());

async function getAllTasks() {
  const { data, error } = await supabase.from("tasks").select("*");
  if (error) throw error;
  return data;
}

const client = new twilio(
  process.env.TWILIO_ACCOUNT_SID,
  process.env.TWILIO_AUTH_TOKEN
);

app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

let userSessions = {}; 
let allData = [];
let assignerMap = []; // Store assigner's phone numbers separately

async function main() {
  allData = await getAllTasks();
  makeTwilioRequest();
}

main();

function makeTwilioRequest() {
  app.post("/whatsapp", async (req, res) => {
    const { Body, From } = req.body;
    const userMessage = Body.trim().toLowerCase();

    if (!userSessions[From]) {
        userSessions[From] = { step: 0, task: "", assignee: "", dueDate: "", dueTime: "", assignerNumber:From };
    }

    let session = userSessions[From];

    if (userMessage === "hi") {
        session.step = 1;
        sendMessage(From, "What is the task?");
        assignerMap.push(From)
    } 
    else if (session.step === 1) {
        session.task = Body.trim();
        session.step = 2;
        sendMessage(From, "Whom is this task assigned to?");
    } 
    else if (session.step === 2) {
        session.assignee = Body.trim();
        const assignedPerson = allData.find((person) => person.name.toLowerCase() === session.assignee.toLowerCase());

        if (assignedPerson) {
            session.step = 3;
            sendMessage(From, "What is the due date? (Format: YYYY-MM-DD)");
        } else {
            sendMessage(From, "Person not found. Please enter a valid name.");
            session.step = 2;
        }
    } 
    else if (session.step === 3) {
        session.dueDate = Body.trim();
        session.step = 4;
        sendMessage(From, "What is the due time? (Format: HH:MM, 24-hour)");
    } 
    else if (session.step === 4) {
        session.dueTime = Body.trim();
        const assignedPerson = allData.find((person) => person.name.toLowerCase() === session.assignee.toLowerCase());

        console.log('assignedPerson--->',assignedPerson);
        console.log('allData--->',allData);

        
        if (assignedPerson) {
            let dueDateTime = `${session.dueDate} ${session.dueTime}`;
            assignedPerson.tasks = session.task;

            await supabase
                .from("tasks")
                .update({ tasks: session.task, due_date: dueDateTime, task_done: "Pending", reminder: false })
                .eq("name", assignedPerson.name);

            sendMessage(From, `Task assigned to ${assignedPerson.name}: "${session.task}" with a due date of ${dueDateTime}`);

            sendMessage(
                `whatsapp:+${assignedPerson.phone}`,
                `Hello ${assignedPerson.name}, a new task has been assigned to you: "${session.task}".\n\nDeadline: ${dueDateTime}`
            );

            delete userSessions[From];
        } else {
            sendMessage(From, "Error: Could not find assignee.");
        }
    } 

    else if (session.step === 5) {
        console.log('step 5--->',assignerMap);

        const assignedPerson = allData.find((person) => `whatsapp:+${person.phone}` === From);
        if (!assignedPerson) return res.sendStatus(200);

        if (userMessage === "yes") {
            await supabase
                .from("tasks")
                .update({ task_done: "Yes", reminder: false })
                .eq("name", assignedPerson.name);

            sendMessage(From, "Thank you! The task has been marked as completed.");

            sendMessage(assignerMap[0], `The task "${session.task}" assigned to ${assignedPerson.name} was completed.`);

            delete userSessions[From];
        } 
        else if (userMessage === "no") {
            sendMessage(From, "Please provide a reason for not completing the task yet.");
            session.step = 6;
        }
    } 

    else if (session.step === 6) {
        const assignedPerson = allData.find((person) => `whatsapp:+${person.phone}` === From);

        if (!assignedPerson) return res.sendStatus(200);

        sendMessage(assignerMap[0], `The task "${session.task}" assigned to ${assignedPerson.name} was not completed. Reason: ${Body.trim()}`);

        console.log(`No, ${Body.trim()}`);
        
        await supabase
            .from("tasks")
            .update({ task_done: `No, ${Body.trim()}` })
            .eq("name", assignedPerson.name);

        sendMessage(From, "Your response has been sent to the assigner.");
        delete userSessions[From];
    }

    res.end();
});

}

function sendMessage(to, message) {
  client.messages
    .create({
      from: process.env.TWILIO_PHONE_NUMBER,
      to,
      body: message,
    })
    .catch((err) => console.error("Error sending message:", err));
}

let isCronRunning = false; // Track if the cron job is active

app.post('/update-reminder', async (req, res) => {
    if (isCronRunning) {
        console.log("Cron job already running. Ignoring duplicate trigger.");
        return res.status(200).json({ message: "Reminder already scheduled" });
    }

    isCronRunning = true; // Mark cron job as running

    cron.schedule("* * * * *", async () => {
        console.log("Checking for pending reminders...");

        const now = new Date();
        const tenMinutesLater = new Date(now.getTime() + 10 * 60 * 1000).toISOString().slice(0, 16);

        const { data: tasks, error } = await supabase
            .from("tasks")
            .select("*")
            .eq("reminder", true)
            .neq("task_done", "Yes")
            .neq("task_done", "No")
            .neq("task_done", "Reminder sent") 
            .not("tasks", "is", null)
            .neq("tasks", "");

        if (error) {
            console.error("Error fetching reminders:", error);
            return;
        }

        console.log(`Found ${tasks.length} tasks to remind`);

        for (const task of tasks) {
            console.log("Sending reminder to:", task.phone);
            sendMessage(
                `whatsapp:+${task.phone}`,
                `Reminder: Has the task "${task.tasks}" assigned to you been completed yet? Reply with Yes or No.`
            );

            userSessions[`whatsapp:+${task.phone}`] = { step: 5, task: task.tasks };

            // Optional: Mark the task as "Reminder sent" to avoid resending it
            // await supabase
            //     .from("tasks")
            //     .update({ task_done: "Reminder sent" })
            //     .eq("id", task.id);
        }
    });

    res.status(200).json({ message: "Reminder scheduled" });
});



app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
